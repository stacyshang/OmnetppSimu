//
// Generated file, do not edit! Created by nedtool 5.1 from Messages/CtrltoRoutingTableMod.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __CTRLTOROUTINGTABLEMOD_M_H
#define __CTRLTOROUTINGTABLEMOD_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Messages/CtrltoRoutingTableMod.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet CtrltoRoutingTableMod
 * {
 *     int ocs0mapleft[100];
 *     int ocs0mapright[100];
 *     int ocs1mapleft[100];
 *     int ocs1mapright[100];
 *     int ocs0mapsize;
 *     int ocs1mapsize;
 * }
 * </pre>
 */
class CtrltoRoutingTableMod : public ::omnetpp::cPacket
{
  protected:
    int ocs0mapleft[100];
    int ocs0mapright[100];
    int ocs1mapleft[100];
    int ocs1mapright[100];
    int ocs0mapsize;
    int ocs1mapsize;

  private:
    void copy(const CtrltoRoutingTableMod& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CtrltoRoutingTableMod&);

  public:
    CtrltoRoutingTableMod(const char *name=nullptr, short kind=0);
    CtrltoRoutingTableMod(const CtrltoRoutingTableMod& other);
    virtual ~CtrltoRoutingTableMod();
    CtrltoRoutingTableMod& operator=(const CtrltoRoutingTableMod& other);
    virtual CtrltoRoutingTableMod *dup() const override {return new CtrltoRoutingTableMod(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getOcs0mapleftArraySize() const;
    virtual int getOcs0mapleft(unsigned int k) const;
    virtual void setOcs0mapleft(unsigned int k, int ocs0mapleft);
    virtual unsigned int getOcs0maprightArraySize() const;
    virtual int getOcs0mapright(unsigned int k) const;
    virtual void setOcs0mapright(unsigned int k, int ocs0mapright);
    virtual unsigned int getOcs1mapleftArraySize() const;
    virtual int getOcs1mapleft(unsigned int k) const;
    virtual void setOcs1mapleft(unsigned int k, int ocs1mapleft);
    virtual unsigned int getOcs1maprightArraySize() const;
    virtual int getOcs1mapright(unsigned int k) const;
    virtual void setOcs1mapright(unsigned int k, int ocs1mapright);
    virtual int getOcs0mapsize() const;
    virtual void setOcs0mapsize(int ocs0mapsize);
    virtual int getOcs1mapsize() const;
    virtual void setOcs1mapsize(int ocs1mapsize);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CtrltoRoutingTableMod& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CtrltoRoutingTableMod& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CTRLTOROUTINGTABLEMOD_M_H

